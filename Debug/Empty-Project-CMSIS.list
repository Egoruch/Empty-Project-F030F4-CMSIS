
Empty-Project-CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  4 .ARM          00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b4  080002b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b8  080002b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000104  2000001c  080002bc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004fa  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000223  00000000  00000000  000107de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000837f  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000099e  00000000  00000000  00018e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002b992  00000000  00000000  000197ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004517f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  000451fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800029c 	.word	0x0800029c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800029c 	.word	0x0800029c

08000108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800010c:	46c0      	nop			; (mov r8, r8)
 800010e:	46bd      	mov	sp, r7
 8000110:	bd80      	pop	{r7, pc}
	...

08000114 <main>:
#include "main.h"

void Delay(uint32_t time);

int main(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; /* Clock GPIOA */
 8000118:	4b2d      	ldr	r3, [pc, #180]	; (80001d0 <main+0xbc>)
 800011a:	695a      	ldr	r2, [r3, #20]
 800011c:	4b2c      	ldr	r3, [pc, #176]	; (80001d0 <main+0xbc>)
 800011e:	2180      	movs	r1, #128	; 0x80
 8000120:	0289      	lsls	r1, r1, #10
 8000122:	430a      	orrs	r2, r1
 8000124:	615a      	str	r2, [r3, #20]

	GPIOA->MODER |= GPIO_MODER_MODER4_0; /* 01: General purpose output mode */
 8000126:	2390      	movs	r3, #144	; 0x90
 8000128:	05db      	lsls	r3, r3, #23
 800012a:	681a      	ldr	r2, [r3, #0]
 800012c:	2390      	movs	r3, #144	; 0x90
 800012e:	05db      	lsls	r3, r3, #23
 8000130:	2180      	movs	r1, #128	; 0x80
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	430a      	orrs	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER4_1;
 8000138:	2390      	movs	r3, #144	; 0x90
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	2390      	movs	r3, #144	; 0x90
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	4924      	ldr	r1, [pc, #144]	; (80001d4 <main+0xc0>)
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]

	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_4; /* 0: Output push-pull */
 8000148:	2390      	movs	r3, #144	; 0x90
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	685a      	ldr	r2, [r3, #4]
 800014e:	2390      	movs	r3, #144	; 0x90
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2110      	movs	r1, #16
 8000154:	438a      	bics	r2, r1
 8000156:	605a      	str	r2, [r3, #4]

	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_0; /* 01: Medium speed */
 8000158:	2390      	movs	r3, #144	; 0x90
 800015a:	05db      	lsls	r3, r3, #23
 800015c:	689a      	ldr	r2, [r3, #8]
 800015e:	2390      	movs	r3, #144	; 0x90
 8000160:	05db      	lsls	r3, r3, #23
 8000162:	2180      	movs	r1, #128	; 0x80
 8000164:	0049      	lsls	r1, r1, #1
 8000166:	430a      	orrs	r2, r1
 8000168:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4_1;
 800016a:	2390      	movs	r3, #144	; 0x90
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	689a      	ldr	r2, [r3, #8]
 8000170:	2390      	movs	r3, #144	; 0x90
 8000172:	05db      	lsls	r3, r3, #23
 8000174:	4917      	ldr	r1, [pc, #92]	; (80001d4 <main+0xc0>)
 8000176:	400a      	ands	r2, r1
 8000178:	609a      	str	r2, [r3, #8]

	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR4_0; /* 00: No pull-up, pull-down */
 800017a:	2390      	movs	r3, #144	; 0x90
 800017c:	05db      	lsls	r3, r3, #23
 800017e:	68da      	ldr	r2, [r3, #12]
 8000180:	2390      	movs	r3, #144	; 0x90
 8000182:	05db      	lsls	r3, r3, #23
 8000184:	4914      	ldr	r1, [pc, #80]	; (80001d8 <main+0xc4>)
 8000186:	400a      	ands	r2, r1
 8000188:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR4_1;
 800018a:	2390      	movs	r3, #144	; 0x90
 800018c:	05db      	lsls	r3, r3, #23
 800018e:	68da      	ldr	r2, [r3, #12]
 8000190:	2390      	movs	r3, #144	; 0x90
 8000192:	05db      	lsls	r3, r3, #23
 8000194:	490f      	ldr	r1, [pc, #60]	; (80001d4 <main+0xc0>)
 8000196:	400a      	ands	r2, r1
 8000198:	60da      	str	r2, [r3, #12]

    while(1){

    	/* LED on */
    	GPIOA->BSRR |= GPIO_BSRR_BR_4;
 800019a:	2390      	movs	r3, #144	; 0x90
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	699a      	ldr	r2, [r3, #24]
 80001a0:	2390      	movs	r3, #144	; 0x90
 80001a2:	05db      	lsls	r3, r3, #23
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	0349      	lsls	r1, r1, #13
 80001a8:	430a      	orrs	r2, r1
 80001aa:	619a      	str	r2, [r3, #24]
    	Delay(100000);
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0xc8>)
 80001ae:	0018      	movs	r0, r3
 80001b0:	f000 f816 	bl	80001e0 <Delay>

    	/* LED off */
		GPIOA->BSRR |= GPIO_BSRR_BS_4;
 80001b4:	2390      	movs	r3, #144	; 0x90
 80001b6:	05db      	lsls	r3, r3, #23
 80001b8:	699a      	ldr	r2, [r3, #24]
 80001ba:	2390      	movs	r3, #144	; 0x90
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	2110      	movs	r1, #16
 80001c0:	430a      	orrs	r2, r1
 80001c2:	619a      	str	r2, [r3, #24]
		Delay(100000);
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <main+0xc8>)
 80001c6:	0018      	movs	r0, r3
 80001c8:	f000 f80a 	bl	80001e0 <Delay>
    	GPIOA->BSRR |= GPIO_BSRR_BR_4;
 80001cc:	e7e5      	b.n	800019a <main+0x86>
 80001ce:	46c0      	nop			; (mov r8, r8)
 80001d0:	40021000 	.word	0x40021000
 80001d4:	fffffdff 	.word	0xfffffdff
 80001d8:	fffffeff 	.word	0xfffffeff
 80001dc:	000186a0 	.word	0x000186a0

080001e0 <Delay>:

    }
}

void Delay(uint32_t time){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	while(time > 0){
 80001e8:	e002      	b.n	80001f0 <Delay+0x10>
		time--;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3b01      	subs	r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
	while(time > 0){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d1f9      	bne.n	80001ea <Delay+0xa>
	}
}
 80001f6:	46c0      	nop			; (mov r8, r8)
 80001f8:	46bd      	mov	sp, r7
 80001fa:	b002      	add	sp, #8
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000204:	f7ff ff80 	bl	8000108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 f811 	bl	8000254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ff6f 	bl	8000114 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	080002bc 	.word	0x080002bc
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	2000001c 	.word	0x2000001c

08000250 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC_IRQHandler>
	...

08000254 <__libc_init_array>:
 8000254:	b570      	push	{r4, r5, r6, lr}
 8000256:	2600      	movs	r6, #0
 8000258:	4d0c      	ldr	r5, [pc, #48]	; (800028c <__libc_init_array+0x38>)
 800025a:	4c0d      	ldr	r4, [pc, #52]	; (8000290 <__libc_init_array+0x3c>)
 800025c:	1b64      	subs	r4, r4, r5
 800025e:	10a4      	asrs	r4, r4, #2
 8000260:	42a6      	cmp	r6, r4
 8000262:	d109      	bne.n	8000278 <__libc_init_array+0x24>
 8000264:	2600      	movs	r6, #0
 8000266:	f000 f819 	bl	800029c <_init>
 800026a:	4d0a      	ldr	r5, [pc, #40]	; (8000294 <__libc_init_array+0x40>)
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <__libc_init_array+0x44>)
 800026e:	1b64      	subs	r4, r4, r5
 8000270:	10a4      	asrs	r4, r4, #2
 8000272:	42a6      	cmp	r6, r4
 8000274:	d105      	bne.n	8000282 <__libc_init_array+0x2e>
 8000276:	bd70      	pop	{r4, r5, r6, pc}
 8000278:	00b3      	lsls	r3, r6, #2
 800027a:	58eb      	ldr	r3, [r5, r3]
 800027c:	4798      	blx	r3
 800027e:	3601      	adds	r6, #1
 8000280:	e7ee      	b.n	8000260 <__libc_init_array+0xc>
 8000282:	00b3      	lsls	r3, r6, #2
 8000284:	58eb      	ldr	r3, [r5, r3]
 8000286:	4798      	blx	r3
 8000288:	3601      	adds	r6, #1
 800028a:	e7f2      	b.n	8000272 <__libc_init_array+0x1e>
 800028c:	080002b4 	.word	0x080002b4
 8000290:	080002b4 	.word	0x080002b4
 8000294:	080002b4 	.word	0x080002b4
 8000298:	080002b8 	.word	0x080002b8

0800029c <_init>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	469e      	mov	lr, r3
 80002a6:	4770      	bx	lr

080002a8 <_fini>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr
